/**
 * 声明 gradle脚本自身需要使用的资源。可以声明的资源包括依赖项、第三方插件、maven仓库地址等。
 * gradle是由groovy语言编写的，支持groovy语法，可以灵活的使用已有的各种ant插件、基于jvm的类库，
 * 这也是它比maven、 ant等构建脚本强大的原因。虽然gradle支持开箱即用，但是如果你想在脚本中使用一些第三方的插件、类库等，
 * 就需要自己手动添加对这些插件、类库的 引用。而这些插件、类库又不是直接服务于项目的，而是支持其它build脚本的运行。
 * 所以你应当将这部分的引用放置在buildscript代码块中。 gradle在执行脚本时，会优先执行buildscript代码块中的内容，
 * 然后才会执行剩余的build脚本。
 */
buildscript {
    repositories {
        mavenLocal()
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
        mavenCentral()
    }
    //定义全局变量
    ext {
        baseVersion = '1.0.0-SNAPSHOT'
        gradleVersion = '5.1'
        javaVersion = '11'
        junitVersion = '5.6.0'
        slf4jVersion = '1.7.25'

        jacocoVersion = '0.8.3'
        pmdVersion = '6.15.0'
        checkstyleVersion = '8.29'

        //指定springboot 版本
        springBootVersion = '2.3.7.RELEASE'
        mybatisStartVersion = '2.1.4'

        lombokVersion = '1.18.12'
        hutoolVersion = '5.5.4'
        jwtVersion = '3.8.2'

        mybatisplusVersion = '3.4.1'
        springfoxVersion = '3.0.0'
        knife4jVersion = '3.0.2'
        jacksonDatatypeVersion = '2.8.9'
        hibernatevalidatorversion = '7.0.0.Final'
    }

    dependencies {
        //引入springboot gradle 插件
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath("org.jacoco:org.jacoco.core:$jacocoVersion")
    }

}
/**
 * 引入所有模块的配置
 */
allprojects {
    //创建项目输入groupId
    group 'com.panji'
    //创建项目所输入的版本
    version '1.0-SNAPSHOT'
    //指定运行环境，java
    apply plugin: 'java'
    //指定ide环境，idea
    apply plugin: 'idea'
    //定义全局变量
    ext {

    }
}
/**
 * 引入所有子模块的配置
 */
subprojects {
    //引入spring 依赖管理插件
    apply plugin: 'io.spring.dependency-management'
    //引入springboot 插件
    apply plugin: 'org.springframework.boot'

    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'checkstyle'
    apply plugin: 'jacoco'

    // 区分生成的契约测试的 SourceSet
    // IDEA 有个 BUG，单独设置 gensrc/test/java 为一个 SourceSet 的话，不会加入到 Test Source Root
    // 见：https://youtrack.jetbrains.com/issue/IDEA-151925
    sourceSets {
        // Spring Cloud Contract 会直接从 Groovy 生成测试 Class，这里就不需要加 gensrc 目录了。
        orgtest {
            java.srcDir file('src/test/java')
            resources.srcDir file('src/test/resources')
            compileClasspath += sourceSets.test.compileClasspath
            runtimeClasspath += sourceSets.test.runtimeClasspath
            annotationProcessorPath += sourceSets.test.annotationProcessorPath
        }
        main {
            java.srcDir 'src/main/java'
        }
        orgmain {
            java.srcDir file('src/main/java')
            resources.srcDir file('src/main/resources')
            compileClasspath += sourceSets.main.compileClasspath
            runtimeClasspath += sourceSets.main.runtimeClasspath
            annotationProcessorPath += sourceSets.main.annotationProcessorPath
        }
    }

    checkstyle {
        toolVersion = checkstyleVersion
        ignoreFailures = false
        showViolations = true
        configFile = file("$rootDir/checkstyle.xml")
    }

    group = 'com.panji'
    version = baseVersion

    //指定编译编译.java文件的jdk版本
    sourceCompatibility = javaVersion
    //确保class文件与targetCompatibility指定版本，或者更新的java虚拟机兼容
    targetCompatibility = javaVersion


    //指定gradle编译时，针对java文件使用 UTF-8 编码
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }


    /**
     * 指定子模块所使用仓库的路径
     * */
    repositories {
        mavenLocal()
        maven { url "http://maven.aliyun.com/nexus/content/groups/public" }
        mavenCentral()
    }
    /**
     * 引入子模块jar包
     */
    dependencies {
        //引入log4j
        compile("org.slf4j:slf4j-api:$slf4jVersion")
        //引入Junit 单元测试
        testCompile("org.junit.jupiter:junit-jupiter-api:$junitVersion")
        testCompile 'org.junit.jupiter:junit-jupiter-engine'
        //引入springboot starter
        compile('org.springframework.boot:spring-boot-starter')
        compile('org.springframework.boot:spring-boot-starter-security')
        compile("com.auth0:java-jwt:$jwtVersion")
        compile 'io.jsonwebtoken:jjwt:0.9.1'

        testCompile('org.springframework.boot:spring-boot-starter-test')
        implementation 'org.springframework.boot:spring-boot-starter-web'
        compile group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
        compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-redis'

        compile("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonDatatypeVersion")
        compile("com.github.xiaoymin:knife4j-spring-boot-starter:$knife4jVersion")


        annotationProcessor("org.projectlombok:lombok:$lombokVersion")
        compileOnly("org.projectlombok:lombok:$lombokVersion") {
            force = true
        }
        // test
        testAnnotationProcessor("org.projectlombok:lombok:$lombokVersion")
        testCompileOnly("org.projectlombok:lombok:$lombokVersion") {
            force = true
        }
    }

}
